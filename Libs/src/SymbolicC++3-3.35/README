SymbolicC++ was originally written as a collection of header files
for C++. Many of the functions and classes provided are template
functions and classes and in general cannot be compiled in as part
of a library.

This project attempts to extract the parts of SymbolicC++ that can
be compiled as part of a library and so create the include / library
infrastructure. The src and include directories are populated by
scripts from the SymbolicC++ header files.

== Installation to /usr/local ===============================================

To install to /usr/local:

  ./configure
  make
  make install

To compile a program using SymbolicC++ with GCC:

  g++ -o program program.cpp -lsymbolicc++

To run the program:

  ./program
 
A brief PDF document describing SymbolicC++ is provided (doc/introsymb.pdf)
and is installed as /usr/local/share/doc/SymbolicC++.pdf.


== Installation elsewhere ===================================================

This section describes installation to a directory "where_to_install".
The directory must be a full path, i.e. it should not begin with "./" or
"../".

To install:

  ./configure --prefix=where_to_install
  make
  make install

** If the directory is a standard system directory, proceed as described
** in the section "Installation to /usr/local" above.

To compile a program using SymbolicC++ with GCC (all on one line):

  g++ -I where_to_install/include
      -L where_to_install/lib
      -o program program.cpp -lsymbolicc++

When running the program, make sure that the dynamic libraries can be located,
for example by modifying /etc/ld.so.conf or by setting the LD_LIBRARY_PATH
(for Bourne shell compatible shells)

  $ ./program 
  Shared object "libsymbolicc++.so.3" not found
  $ LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:where_to_install/lib
  $ export LD_LIBRARY_PATH
  $ ./program 
  ...

A brief PDF document describing SymbolicC++ is provided (doc/introsymb.pdf)
and is installed as where_to_install/share/doc/SymbolicC++.pdf.
